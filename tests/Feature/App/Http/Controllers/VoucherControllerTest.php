<?php

namespace Tests\Feature\App\Http\Controllers;

use App\Exceptions\VoucherDeniedException;
use App\Models\User;

use App\Models\Voucher\Voucher;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Ramsey\Uuid\Uuid;
use Tests\TestCase;

class VoucherControllerTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_admin_can_create_voucher()
    {
        // Prepare
        $admin = User::factory()->create(['admin' => 1]);
        $this->actingAs($admin);

        $payload = [
            'amount' => '3000'
        ];

        // Act
        $response = $this->post(route('post-voucher'), $payload);

        // Assert
        $response->assertOk(200);
    }

    public function test_client_can_see_redeem_voucher_view()
    {
        // Prepare
        $user = User::factory()->create();
        $this->actingAs($user);

        // Act
        $response = $this->get(route('get-redeem-voucher'));

        // Assert
        $response->assertViewIs('campus.voucher.redeem')
            ->assertSee('Resgatar Voucher');

    }

    public function test_admin_can_see_view_create_voucher()
    {
        // Prepare
        $user = User::factory()->create(['admin' => 1]);
        $this->actingAs($user);

        // Act
        $response = $this->get(route('create-voucher'));

        // Assert
        $response->assertSee('Gerar Voucher de Créditos');

    }

    public function test_client_can_redeem_voucher()
    {
        // Prepare
        $admin = User::factory()->create(['admin' => 1]);
        $voucher = Voucher::create(['voucher' => Uuid::uuid4()->toString(), 'amount' => 1000,  'user_id' => 'admin']);
        $this->actingAs($admin);

        // Act
        $response = $this->post(route('redeem-voucher'), ['voucher' => $voucher->voucher]);

        // Assert
        $response->assertStatus(200);

        //Initial Wallet Credits (300) + 1000 = 1300
        $this->assertDatabaseHas('wallets', [
            'user_id' => $admin->id,
            'credits' => '1300'
        ]);

        $this->assertDatabaseHas('vouchers', [
            'voucher' => $voucher->voucher
        ]);

    }

    public function test_client_can_redeem_used_voucher()
    {
        // Prepare
        $admin = User::factory()->create(['admin' => 1]);
        $voucher = Voucher::create(['voucher' => Uuid::uuid4()->toString(), 'amount' => 1000,  'user_id' => 'admin', 'used' => $admin->id]);
        $this->actingAs($admin);

        // Act
        $response = $this->post(route('redeem-voucher'), ['voucher' => $voucher->voucher]);

        // Assert
        $response->assertJson(['msg' => 'O Voucher Informado já foi resgatado']);
    }

}

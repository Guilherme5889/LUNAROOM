<?php

namespace Tests\Feature\App\Http\Controllers;

use App\Models\User;
use App\Notifications\TransactionSuccessNotification;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Notification;
use Tests\TestCase;

class TransactionControllerTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_client_can_transfer_credits()
    {
        // Prepare
        Notification::fake();

        $user = User::factory()->create();
        $user2 = User::factory()->create();
        $this->actingAs($user);

        $payload = [
            'payee_username' => $user2->username,
            'amount' => '100'
        ];

        // Act
        $response = $this->post(route('post-transaction'), $payload);

        // Assert
        $response->assertStatus(200);

        Notification::assertSentTo(
            [$user2], TransactionSuccessNotification::class
        );

        $this->assertDatabaseHas('wallet_transactions', [
            'payer_wallet_id' => $user->wallet->id,
            'payee_wallet_id' => $user2->wallet->id,
            'amount' => '100'
        ]);


        $this->assertDatabaseHas('wallets', [
            'user_id' => $user->id,
            'credits' => '200'
        ]);

        $this->assertDatabaseHas('wallets', [
            'user_id' => $user2->id,
            'credits' => '400'
        ]);
    }

    public function test_client_can_not_have_credits_to_transfer()
    {
        // Prepare
        $user = User::factory()->create();
        $user2 = User::factory()->create();
        $this->actingAs($user);

        $payload = [
            'payee_username' => $user2->username,
            'amount' => '1000'
        ];

        // Act
        $response = $this->post(route('post-transaction'), $payload);

        // Assert
        $response->assertStatus(422);
    }

    public function test_client_can_not_transfer_yourself()
    {
        // Prepare
        $user = User::factory()->create();
        $this->actingAs($user);

        $payload = [
            'payee_username' => $user->username,
            'amount' => '1000'
        ];

        // Act
        $response = $this->post(route('post-transaction'), $payload);

        // Assert
        $response->assertStatus(422);
    }

    public function test_client_can_see_wallet()
    {
        // Prepare
        $user = User::factory()->create();
        $this->actingAs($user);

        // Act
        $response = $this->get(route('get-transactions'));

        // Assert
        $response->assertStatus(200)
            ->assertViewHas('transactions')
            ->assertSee('Minha Carteira');

    }

}

<?php

namespace Tests\Feature\App\Http\Controllers;

use App\Models\Course;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Storage;
use Illuminate\Http\UploadedFile;
use Tests\TestCase;
use Mockery as m;

class CourseControllerTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_admin_can_see_create_course_view()
    {
        //Prepare
        $user = User::factory()->create(['admin' => '1']);
        $this->actingAs($user);

        //Act
        $response = $this->get(route('add-course'));

        //Assert

        $response->assertOk();
        $response->assertSee('Cadastrar Novo Curso');
    }


    public function test_admin_can_create_course()
    {
        //Prepare
        Storage::fake('public');

        $user = User::factory()->create(['admin' => '1']);

        $file = UploadedFile::fake()->image('test.jpg');

        $payload = [
            'title' => 'Title',
            'description' => 'Descrição',
            'image' => $file,
            'price' => '300'
        ];

        Storage::shouldReceive('disk')
            ->once()
            ->with(m::type('string'))
            ->andReturnSelf();

        Storage::shouldReceive('putFileAs')
            ->once()
            ->with(m::type('string'), $file, m::type('string'));

        //Act
        $this->actingAs($user);
        $response = $this->post(route('post-course'), $payload);

        //Assert
        $response->assertRedirect(route('courses'));

    }

    public function test_admin_can_see_courses_page()
    {
        // Prepare
        $user = User::factory()->create(['admin' => '1']);
        $this->actingAs($user);

        // Act
        $response = $this->get(route('courses'));

        // Assert
        $response->assertStatus(200);
        $response->assertViewHas('courses');
    }

    public function test_admin_can_see_edit_course_page()
    {
        // Prepare
        $user = User::factory()->create(['admin' => '1']);
        $course = Course::factory()->create();
        $this->actingAs($user);

        // Act
        $response = $this->get(route('edit-course', $course->id));

        // Assert
        $response->assertStatus(200);
        $response->assertSee('Gerenciar Curso');
    }

    public function test_admin_can_delete_course()
    {
        // Prepare
        Storage::fake('public');

        $user = User::factory()->create(['admin' => '1']);
        $course = Course::factory()->create();
        $this->actingAs($user);

        Storage::shouldReceive('disk')
            ->once()
            ->with(m::type('string'))
            ->andReturnSelf();

        Storage::shouldReceive('delete')
            ->once()
            ->withAnyArgs();

        // Act
        $response = $this->get(route('delete-course', $course->id));

        //Assert
        $response->assertRedirect(route('courses'));
        $this->assertDatabaseMissing('courses', [
            'title' => $course->title
        ]);
    }
}

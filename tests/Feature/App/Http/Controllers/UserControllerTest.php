<?php


namespace Tests\Feature\App\Http\Controllers;


use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class UserControllerTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testViewClients()
    {
        $user = User::factory()->create(['admin' => '1']);

        $this->actingAs($user)
            ->get(route('users'))
            ->assertViewIs('admin.users')
            ->assertViewHas('users');
    }

    public function test_admin_can_see_update_user_page()
    {
        $user = User::factory()->create(['admin' => '1']);

        $response = $this->actingAs($user)
            ->get(route('get-user', $user->id));

        $response->assertViewIs('admin.update-user')
            ->assertViewHas('user');
    }

    public function test_admin_can_not_see_update_user_page()
    {
        $user = User::factory()->create(['admin' => '1']);

        $response = $this->actingAs($user)
            ->get(route('get-user', '99999'));

        $response->assertStatus(404);
    }

    public function test_admin_can_update_user()
    {
        $user = User::factory()->create(['admin' => '1']);

        $payload = [
            'name' => 'Fake_Name',
            'username' => 'Fake_Username',
            'email' => 'fakeemail@email.com',
            'admin' => '1'
        ];

        $response = $this->actingAs($user)
            ->put(route('put-user', $user->id), $payload);

        $this->assertDatabaseHas('users', [
            'username' => $payload["username"],
            'email' => $payload["email"]
        ]);

        $response->assertRedirect(route('get-user', $user->id));
    }

    public function test_admin_can_not_update_user()
    {
        $user = User::factory()->create(['admin' => '1']);

        $payload = [
            'name' => 'Fake_Name',
            'username' => 'Fake_Username',
            'email' => 'fakeemail@email.com',
            'admin' => '3123123' // This is invalid UserEnum
        ];

        $response = $this->actingAs($user)
            ->put(route('put-user', $user->id), $payload);

        $response->assertStatus(302);
    }
}


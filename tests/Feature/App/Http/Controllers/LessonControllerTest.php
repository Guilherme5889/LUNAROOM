<?php

namespace Tests\Feature\App\Http\Controllers;

use App\Enums\LessonEnum;
use App\Models\Course;
use App\Models\Lesson;
use App\Models\Module;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Storage;
use Illuminate\Http\UploadedFile;
use Tests\TestCase;
use Mockery as m;

class LessonControllerTest extends TestCase
{
    use RefreshDatabase;

    private $admin;
    private $course;
    private $module;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->admin = User::factory()->create(['admin' => '1']);
        $this->course = Course::factory()->create();
        $this->module = Module::create(['course_id' => $this->course->id, 'name' => 'Module_Test']);
    }

    public function test_admin_can_post_lesson()
    {
        // Prepare
        $this->actingAs($this->admin);

        $payload = [
            'module_id' => $this->module->id,
            'title' => 'Title_Test',
            'description' => 'Desc_Test',
            'provider_video' => LessonEnum::PROVIDER_VIMEO,
            'video_link' => 'https://google.com',
            'init_date' => Carbon::now()
        ];

        // Act
        $response = $this->post(route('post-lesson'), $payload);

        // Assert
        $response->assertOk();
        $this->assertDatabaseHas('lessons', [
            'title' => 'Title_Test'
        ]);
    }

    public function test_admin_can_not_post_lesson()
    {
        // Prepare
        $this->actingAs($this->admin);

        $payload = [
            'module_id' => $this->module->id,
            'title' => 'Title_Test',
            'description' => 'Desc_Test',
            'provider_video' => LessonEnum::PROVIDER_VIMEO,
            'video_link' => 'https://google.com',
        ];

        // Act
        $response = $this->post(route('post-lesson'), $payload);

        // Assert
        $response->assertStatus(302);
        $response->assertSessionHasErrors();
    }

    public function test_admin_can_update_lesson()
    {
        // Prepare
        $this->actingAs($this->admin);

        $payload = [
            'module_id' => $this->module->id,
            'title' => 'Title_Test_BlaBla',
            'description' => 'Desc_Test_BlaBla',
            'provider_video' => LessonEnum::PROVIDER_VIMEO,
            'video_link' => 'https://google.com',
            'init_date' => Carbon::now()
        ];

        $lesson = Lesson::create($payload);

        // Act
        $response = $this->put(route('put-lesson', $lesson->id), ['title' => 'Updated_Title']);

        // Assert
        $response->assertOk();
        $this->assertDatabaseHas('lessons', [
            'id' => $lesson->id,
            'title' => 'Updated_Title'
        ]);
    }

    public function test_admin_can_delete_lesson()
    {
        // Prepare
        $this->actingAs($this->admin);

        $payload = [
            'module_id' => $this->module->id,
            'title' => 'Title_Test_BlaBla',
            'description' => 'Desc_Test_BlaBla',
            'provider_video' => LessonEnum::PROVIDER_VIMEO,
            'video_link' => 'https://google.com',
            'init_date' => Carbon::now()
        ];

        $lesson = Lesson::create($payload);


        // Act
        $response = $this->get(route('delete-lesson', $lesson->id));

        // Assert
        $response->assertRedirect(route('courses'));

        $this->assertDatabaseMissing('lessons', [
            'id' => $lesson->id
        ]);
    }

    public function test_client_should_see_your_courses()
    {
        // Prepare
        $user = User::factory()->create();
        $this->actingAs($user);
        $user->courses()->sync(['course_id' => $this->course->id]);

        // Act
        $response = $this->get(route('my-courses'));

        // Assert
        $response->assertViewHas('courses');
    }

}
